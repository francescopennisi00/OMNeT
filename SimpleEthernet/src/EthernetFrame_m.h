//
// Generated file, do not edit! Created by opp_msgtool 6.0 from EthernetFrame.msg.
//

#ifndef __ETHERNETFRAME_M_H
#define __ETHERNETFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class EthernetFrame;
/**
 * Class generated from <tt>EthernetFrame.msg:2</tt> by opp_msgtool.
 * <pre>
 * //inglobiamo il contenuto informativo utile in un frame Ethernet, che il livello MAC passa al livello fisico
 * packet EthernetFrame
 * {
 *     string dst;
 *     string src;
 * 
 *     //dimensione del frame 
 *     //(senza payload, modellizzato in un oggetto ApplicationPacket che però non contiene reale payload)
 *     byteLength = 26;
 * 
 *     //il preambolo e' nella struttura del frame ma e' aggiunto a livello fisico, non in questo livello
 *     //il campo FCS non viene incluso perché in Omnetpp c'e' gia' un controllo sui bit di un packet
 * 
 *     int etherType; //tipologia Ethernet, non c'e' un campo apposito nella struttura del Frame
 * 
 * 
 * }
 * </pre>
 */
class EthernetFrame : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string dst;
    omnetpp::opp_string src;
    int etherType = 0;

  private:
    void copy(const EthernetFrame& other);

  protected:
    bool operator==(const EthernetFrame&) = delete;

  public:
    EthernetFrame(const char *name=nullptr, short kind=0);
    EthernetFrame(const EthernetFrame& other);
    virtual ~EthernetFrame();
    EthernetFrame& operator=(const EthernetFrame& other);
    virtual EthernetFrame *dup() const override {return new EthernetFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getDst() const;
    virtual void setDst(const char * dst);

    virtual const char * getSrc() const;
    virtual void setSrc(const char * src);

    virtual int getEtherType() const;
    virtual void setEtherType(int etherType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetFrame& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline EthernetFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<EthernetFrame*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __ETHERNETFRAME_M_H

