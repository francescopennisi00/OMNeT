//
// Generated file, do not edit! Created by opp_msgtool 6.0 from EthernetFrame.msg.
//

#ifndef __ETHERNETFRAME_M_H
#define __ETHERNETFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class EthernetFrame;
struct RelayTableEntry;
class StaticRelayEntries;
/**
 * Class generated from <tt>EthernetFrame.msg:2</tt> by opp_msgtool.
 * <pre>
 * //inglobiamo il contenuto informativo utile in un frame Ethernet, che il livello MAC (DataLink) passa al livello fisico
 * packet EthernetFrame
 * {
 *     string dst;
 *     string src;
 * 
 *     //dimensione del frame in bytes (12 per source e destination MAC addresses, 2 per EtherType/Len, 4 per il CRC e 8 per il preambolo)
 *     //(senza payload, modellizzato in un oggetto DataPacket che però non contiene reale payload)
 *     byteLength = 26;
 * 
 *     //il preambolo e' nella struttura del frame ma e' aggiunto a livello fisico, non nel MAC (quindi non mettiamo un campo per esso)
 *     //il campo FCS non viene incluso perché in Omnetpp c'e' gia' un controllo sui bit di un packet
 *     //comunque, nella dimensione della frame, li abbiamo contati)
 * 
 *     int etherType; //tipologia Ethernet, non c'e' un campo apposito nella struttura del Frame
 * }
 * </pre>
 */
class EthernetFrame : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string dst;
    omnetpp::opp_string src;
    int etherType = 0;

  private:
    void copy(const EthernetFrame& other);

  protected:
    bool operator==(const EthernetFrame&) = delete;

  public:
    EthernetFrame(const char *name=nullptr, short kind=0);
    EthernetFrame(const EthernetFrame& other);
    virtual ~EthernetFrame();
    EthernetFrame& operator=(const EthernetFrame& other);
    virtual EthernetFrame *dup() const override {return new EthernetFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getDst() const;
    virtual void setDst(const char * dst);

    virtual const char * getSrc() const;
    virtual void setSrc(const char * src);

    virtual int getEtherType() const;
    virtual void setEtherType(int etherType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetFrame& obj) {obj.parsimUnpack(b);}

/**
 * Struct generated from EthernetFrame.msg:22 by opp_msgtool.
 */
struct RelayTableEntry
{
    RelayTableEntry();
    omnetpp::opp_string addr;
    int port = 0;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const RelayTableEntry& a);
void __doUnpacking(omnetpp::cCommBuffer *b, RelayTableEntry& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RelayTableEntry& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RelayTableEntry& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>EthernetFrame.msg:28</tt> by opp_msgtool.
 * <pre>
 * //DEFINIAMO UNA CLASSE CHE CONTERRA' UN ARRAY DI ENTRIES (CIOE' LE ENTRIES STATICHE DELLA TABELLA DI FORWARDING)
 * class StaticRelayEntries extends cOwnedObject
 * {
 *     RelayTableEntry entries[]; //PER DICHIARARE UN ARRAY DENTRO I FILE .msg BISOGNA INCAPSULARE L'ARRAY IN UNA CLASSE
 * }
 * </pre>
 */
class StaticRelayEntries : public ::omnetpp::cOwnedObject
{
  protected:
    RelayTableEntry *entries = nullptr;
    size_t entries_arraysize = 0;

  private:
    void copy(const StaticRelayEntries& other);

  protected:
    bool operator==(const StaticRelayEntries&) = delete;

  public:
    StaticRelayEntries(const char *name=nullptr);
    StaticRelayEntries(const StaticRelayEntries& other);
    virtual ~StaticRelayEntries();
    StaticRelayEntries& operator=(const StaticRelayEntries& other);
    virtual StaticRelayEntries *dup() const override {return new StaticRelayEntries(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setEntriesArraySize(size_t size);
    virtual size_t getEntriesArraySize() const;
    virtual const RelayTableEntry& getEntries(size_t k) const;
    virtual RelayTableEntry& getEntriesForUpdate(size_t k) { return const_cast<RelayTableEntry&>(const_cast<StaticRelayEntries*>(this)->getEntries(k));}
    virtual void setEntries(size_t k, const RelayTableEntry& entries);
    virtual void insertEntries(size_t k, const RelayTableEntry& entries);
    [[deprecated]] void insertEntries(const RelayTableEntry& entries) {appendEntries(entries);}
    virtual void appendEntries(const RelayTableEntry& entries);
    virtual void eraseEntries(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StaticRelayEntries& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StaticRelayEntries& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline EthernetFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<EthernetFrame*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const RelayTableEntry *p) {return any_ptr(p);}
template<> inline RelayTableEntry *fromAnyPtr(any_ptr ptr) { return ptr.get<RelayTableEntry>(); }
template<> inline StaticRelayEntries *fromAnyPtr(any_ptr ptr) { return check_and_cast<StaticRelayEntries*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __ETHERNETFRAME_M_H

